# Token
 * see <tpl/regex/Token.h>
 * add macros:
		TPL_TOKENS_BEGIN(TokensName)
			TPL_TOKEN(tokenType, RegExT)
		TPL_TOKENS_END();
 * add example: tpl/examples/token

# Find/Token
 * see <tpl/regex/Find.h>
 * add functions:
		Rule<Paragraph> paragraph(); // ==> token<0x0a, 0x0d>()
 * enhancement (http://code.google.com/p/winx/source/detail?r=990):
		Report unstoppable loop in debug version: *Rule, +Rule, *Grammar, +Grammar
 * rename str_token to token:
		Rule<StrToken<c1, c2, c3, c4> > str_token<c1, c2, c3, c4(); ==>
		Rule<StrToken<c1, c2, c3, c4> > token<c1, c2, c3, c4();

# Operator
 * see <tpl/regex/Operator.h>
 * add functions peek, peek_not:
		Rule<PeekNot<c1, c2, c3, c4> > peek<c1, c2, c3, c4>();
		Rule<PeekNot<c1, c2, c3, c4> > peek_not<c1, c2, c3, c4>();

# Terminal
 * see <tpl/regex/Terminal.h>
 * add functions ch_mask, op_mask:
		Rule<ChMask<mask> > ch_mask<mask>();
		Rule<OpMask<mask> > op_mask<mask>();

# UComposition
 * see <tpl/regex/UComposition.h>
 * add function not_eol:
		Rule<NotEol> not_eol();

# Action
 * see <tpl/regex/Action.h>, <tpl/regex/Assign.h>
 * modify: Now an Action is also a Rule
		class ActionT : public RuleT { ... }
 * add action: println
		Action<PrintLn<PredT> > println(PredT pred);
		// Action<Info<CharT> > info(const CharT* prompt);
		// see macro TPL_INFO(prompt)
 * add simple action: erase (We already provide: push, push_back, push_front, append, insert, clear, etc).
   usage:
		Rule/erase(string)
		Rule/clear(container)
		Rule/push(container, value)
		Rule/push_back(container, value)
		Rule/push_front(container, value)
		Rule/append(container, value)
		Rule/insert(container, value)

# Predicate (http://code.google.com/p/winx/issues/detail?id=87)
 * see <tpl/regex/Predicate.h>
 * add predicate: neICase (That is: !eqIgnoreCase)
 * support Predicate composition: operator &&, operator ||, operator!
 * add function: meet
		Predicate<PredT> meet(const PredT& pred);

# C Lex
 * see <tpl/c/Lex.h>
 * add function: c_token (example: tpl/examples/token)
		Rule<CTokenG> c_token();
 * add function: c_integer_suffix, c_integer_with_suffix
		Rule<CIntegerSuffixG> c_integer_suffix();
		Rule<CIntegerWithSuffixG> c_integer_with_suffix();
 * bugfix: c_integer() can't parse text "0" correctly (http://code.google.com/p/winx/source/detail?r=983).
 * add c_pp_skip_, c_pp_skip_plus_, and declare c_skip_non_eol_ deprecated.

# HTHL Lex (http://code.google.com/p/winx/issues/detail?id=83)
 * see <tpl/html/Lex.h>
 * bugfix: html_value can't ended loop in some condition.
 * enhance: html_entity (http://code.google.com/p/winx/source/detail?r=920)

# Examples
 * tpl/examples/token
 * tpl/examples/validation
