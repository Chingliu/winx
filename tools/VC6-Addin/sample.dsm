'------------------------------------------------------------------------------
'FILE DESCRIPTION: SAMPLE.DSM is a collection of sample editor macros.
'------------------------------------------------------------------------------

'This routine has many uses if you are trying to determine the type of source 
'	file.
'Return value:  0 Unknown file type
'               1 C-related file, this includes .c, .cpp, .cxx, .h, .hpp, .hxx
'               2 Java-related file, this includes .jav, .java
'               3 ODL-style file, .odl, .idl
'               4 Resource file, .rc, .rc2
'               5 HTML-style file, this includes .html, and .htm
'               6 VBS-style file, .dsm
'               7 Def-style file, .def
'USE: Pass this function the document that you wish to get information for.
Function FileType (ByVal doc)
	FileType = 0
	ext = doc.Name
	pos = InstrRev(ext, ".")
	if pos > 0 then
		ext = LCase(Right(ext, Len(ext)-pos+1))
	end if
	If ext = ".rc" Or ext = ".rc2" Then
		FileType = 4
	ElseIf doc.Language = dsCPP Then
		FileType = 1
	ElseIf doc.Language = dsJava Then
		FileType = 2
	ElseIf doc.Language = dsIDL Then
		FileType = 3
	ElseIf doc.Language = dsHTML_IE3 Or doc.Language = dsHTML_RFC1866 Then
		FileType = 5  
	ElseIf doc.Language = dsVBSMacro Then ' 
		FileType = 6  
	ElseIf ext = ".def" Then
		FileType = 7
	Else 
		FileType = 0
	End If 
End Function

Function FileExtType(ByVal ext)
	FileNameLen = Len(ext)
	pos = InstrRev(ext, ".")
	if pos > 0 then
		ext = LCase(Right(ext, FileNameLen-pos+1))
	end if
	If ext = ".cpp" Or ext = ".c" Then
		FileExtType = 1
	ElseIf ext = ".h" Or ext = ".hpp" Then
		FileExtType = 2
	ElseIf ext = ".txt" Then
		FileExtType = 3
	ElseIf ext = ".def" Then
		FileExtType = 7
	Else
		FileExtType = 0
	End If
End Function

'This routine has many uses if you are trying to determine if an identifier
'  is a valid C identifier.
'  These identifiers do not include qualification syntax, for example:
'  foo.bar is not valid
'  foo i valid
'Parameters:    String to test for a valid C identifier.
'Return value:  True: passed parameter is a valid C identifier.
'               False: passed parameter is not a valid C identifier.
Function ValidId(Id)
	ValidId = True

	'Don't permit an empty string
	' (how can you identify nothing with something?)
	if Id = "" then 
	  ValidID = False
	  Exit Function
	End If

	For i = 1 To Len(Id)
	  if Mid(Id, i, 1) < "a" Or Mid(Id, i, 1) > "z" Then
		if Mid(Id, i, 1) < "A" Or Mid(Id, i, 1) > "Z" Then
			if Mid(Id, i, 1) < "0" Or Mid(Id, i, 1) > "9" Then
				if Mid(Id, i, 1) <> "_" Then
					ValidId = False
				End if
			End If
		End If	
	  End If
	Next
	If IsNumeric(Left(Id, 1)) = True Then
		ValidId = False
	End If
End Function

' __________________________________________________________________________
'(
'( Script：CreateCppUnitTestCase
'( Author：许式伟(2004-5-16 19:00)
'(__________________________________________________________________________

Sub CreateCppUnitTestCase()
	ActiveDocument.Selection = _
	"class TestXXXX : public TestCase" + vbLf + _
	"{" + vbLf + _
	"public:" + vbLf + _
	"	CPPUNIT_TEST_SUITE(TestXXXX);" + vbLf + _
	"		CPPUNIT_TEST(testMethodXXX);" + vbLf + _
	"	CPPUNIT_TEST_SUITE_END();" + vbLf + _
	vbLf + _
	"public:" + vbLf + _
	"	void setUp() {}" + vbLf + _
	"	void tearDown() {}" + vbLf + _
	vbLf + _
	"public:" + vbLf + _
	"	void testMethodXXX()" + vbLf + _
	"	{" + vbLf + _
	"	}" + vbLf + _
	"};" + vbLf + _
	vbLf + _
	"CPPUNIT_TEST_SUITE_REGISTRATION_DBG(TestXXXX);" + vbLf
End Sub

Sub CreateCppUnitTestCase2()
	ActiveDocument.Selection = _
	"// -------------------------------------------------------------------------" + vbLf + _
	vbLf + _
	"class TestXXXX : public TestCase" + vbLf + _
	"{" + vbLf + _
	"public:" + vbLf + _
	"	CPPUNIT_TEST_SUITE(TestXXXX);" + vbLf + _
	"		CPPUNIT_TEST(testMethodXXX);" + vbLf + _
	"	CPPUNIT_TEST_SUITE_END();" + vbLf + _
	vbLf + _
	"public:" + vbLf + _
	"	void setUp();" + vbLf + _
	"	void tearDown();" + vbLf + _
	vbLf + _
	"public:" + vbLf + _
	"	void testMethodXXX();" + vbLf + _
	"};" + vbLf + _
	vbLf + _
	"CPPUNIT_TEST_SUITE_REGISTRATION(TestXXXX);" + vbLf + _
	vbLf + _
	"// -------------------------------------------------------------------------" + vbLf + _
	vbLf + _
	"void TestXXXX::setUp()" + vbLf + _
	"{" + vbLf + _
	"}" + vbLf + _
	vbLf + _
	"void TestXXXX::tearDown()" + vbLf + _
	"{" + vbLf + _
	"}" + vbLf + _
	vbLf + _
	"void TestXXXX::testMethodXXX()" + vbLf + _
	"{" + vbLf + _
	"}" + vbLf + _
	vbLf + _
	"// -------------------------------------------------------------------------" + vbLf + vbLf
End Sub

' __________________________________________________________________________
'(
'( Script：给函数、类、结构体等加上说明
'( Author：许式伟(2004-3-14 17:00)
'(__________________________________________________________________________

const S_OK = 0

Function TrimBlanks(ByVal MyStr, ByVal Index)
	'MsgBox "TrimBlanks: " & MyStr & ", Index: " & Index
	Blanks = " " + vbTab + VbCrLf
	MyStrLen = Len(MyStr)
	Do While InStr(Blanks, Mid(MyStr, Index, 1)) > 0
		Index = Index + 1
		If Index > MyStrLen then
			Exit Do
		End If
	Loop
	NewLen = Len(MyStr) - (Index-1)
	If NewLen > 0 Then
		TrimBlanks = Right(MyStr, NewLen)
	End If
End Function

Function BlankText(ByVal MyStr)
	'MsgBox "BlankText: " & MyStr
	Blanks = " " + vbTab + VbCrLf
	Index = 1
	MyStrLen = Len(MyStr)
	Do While InStr(Blanks, Mid(MyStr, Index, 1)) > 0
		Index = Index + 1
		If Index > MyStrLen then
			Exit Do
		End If
	Loop
	BlankText = Left(MyStr, Index-1)
End Function

Function GetSymbolRev(ByVal Header, ByVal Loc2, ByVal SymbolChars, ByRef Symbol)
	Do While Loc2 > 0
		If InStr(SymbolChars, Mid(Header, Loc2, 1)) > 0 then
			'Loc2 - Symbol的最后一个字母
			Exit Do
		End If
		Loc2 = Loc2 - 1
	Loop
	Loc = Loc2 - 1
	Do While Loc > 0
		If InStr(SymbolChars, Mid(Header, Loc, 1)) <= 0 then
			'Loc - Symbol的第一个字母的前一个字母
			Exit Do
		End If
		Loc = Loc - 1
	Loop
	If Loc2 <= 0 then
		GetSymbolRev = -1
		Exit Function
	End If
	Symbol = Mid(Header, Loc+1, Loc2-Loc)
End Function

Function GetSymbol(ByVal MyStr)
	SymbolChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_01234567890"
	Index = 1
	Do While InStr(SymbolChars, Mid(MyStr, Index, 1)) > 0
		Index = Index + 1
	Loop
	GetSymbol = Left(MyStr, Index-1)
End Function

Function TrimTemplateText(ByVal Header)
	Loc = InStr(Header, "<")
	Do While Loc > 0
		TempText = Right(Header, Len(Header)-Loc)
		Loc2 = InStr(TempText, ">")
		If Loc2 <= 0 Then
			Exit Do
		End If
		Loc3 = InStr(TempText, "<")
		If Loc3 <= 0 Or Loc3 > Loc2 Then
			Header = Right(TempText, Len(TempText)-Loc2)
			Exit Do
		End If
		Header = TempText
		Loc = Loc3
	Loop
	TrimTemplateText = TrimBlanks(Header, 1)
	'MsgBox "TrimTemplateText Result: " & Header
End Function

Function AddSimpleManualText(ByVal Header)
	
	'可能是idl文件，去掉前面的 [...] 修饰
	If Left(Header, 1) = "[" Then
		Loc = InStr(Header, "]")
		If Loc <= 0 Then
			Exit Function
		End If
		Header = TrimBlanks(Header, Loc+1)
	'可能是template模板，认为只有class, struct两者可能
	ElseIf Left(Header, 8) = "template" Then
		Header = TrimTemplateText(Header)
	End If

	'MsgBox "AddSimpleManualText: " & Header

	If Left(Header, 5) = "class" Then
		Index = 5
		What = "class"
	ElseIf Left(Header, 6) = "struct" Then
		Index = 6
		What = "struct"
	ElseIf Left(Header, 9) = "interface" Then
		Index = 9
		What = "interface"
	ElseIf Left(Header, 7) = "#define" Then
		Index = 7
		What = "macro"
	Else
		AddSimpleManualText = -1
		Exit Function
	End If
	
	'MsgBox "AddSimpleManualText: What=" & What

	Header = TrimBlanks(Header, Index+1)
	Symbol = GetSymbol(Header)
	If Index = 5 Or Index = 6 Then
		If Symbol = "__novtable" Then
			Symbol = GetSymbol(TrimBlanks(Header, 11))
		ElseIf Symbol = "ATL_NO_VTABLE" Then
			Symbol = GetSymbol(TrimBlanks(Header, 14))
		End If
	End If
	ActiveDocument.Selection.LineUp
	ActiveDocument.Selection.LineDown
	ActiveDocument.Selection.StartOfLine
	ActiveDocument.Selection = "/*" + _
						vbLf + "@" + What + " " + Symbol + _
						vbLf + "@brief" + _
						vbLf + "@remark" + _
						vbLf + "@*/" + vbLf
End Function

Function GetFunctionInfo(ByVal Header, ByRef FuncName, ByRef ArgList)
	'MsgBox "GetFunctionInfo: Header = " & Header

	Loc = InStrRev(Header, "(")
	Loc2 = InStrRev(Header, ")")
	If Loc <= 0 Or Loc2 <= 0 Or Loc > Loc2 then
		GetFunctionInfo = -1
		Exit Function
	End If

	ArgList = Mid(Header, Loc+1, Loc2-Loc-1)

	SymbolChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_:01234567890"
	GetFunctionInfo = GetSymbolRev(Header, Loc-1, SymbolChars, FuncName)
End Function

Function GetArgText(ByVal LineStartText, ByVal Arg)
	Loc = InStr(Arg, "=") '有默认值否
	If Loc > 0 then
		Loc = Loc - 1
	Else
		Loc = Len(Arg)
	End If

	SymbolChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_01234567890"
	Result = GetSymbolRev(Arg, Loc, SymbolChars, ArgName)
	If Result = S_OK then
		Arg = TrimBlanks(Arg, 1)
		If GetSymbol(Arg) = "IN" then
			Arg = TrimBlanks(Arg, 3)
			If GetSymbol(Arg) = "OUT" then
				Direction = "[in, out] "
			Else
				Direction = "[in] "
			End If
		ElseIf GetSymbol(Arg) = "OUT" then
			Direction = "[out] "
		End If
		GetArgText = LineStartText + "@arg " + Direction + ArgName
	End If
End Function

Function GetArgListText(ByVal LineStartText, ByVal ArgList)
	ArgList = TrimBlanks(ArgList, 1)
	If Left(ArgList, 1) = "[" Then
		Loc = InStr(ArgList, "]")
		If Loc <= 0 Then
			Exit Function
		End If
		ArgList = Right(ArgList, Len(ArgList)-Loc)
	End If

	Loc = InStr(ArgList, ",")
	If Loc > 0 then
		Arg1 = Left(ArgList, Loc-1)
		RestArg = Right(ArgList, Len(ArgList) - Loc)
		GetArgListText = GetArgText(LineStartText, Arg1) + GetArgListText(LineStartText, RestArg)
	Else
		GetArgListText = GetArgText(LineStartText, ArgList)
	End If
End Function

Function AddFunctionManualText(ByVal LineStartText, ByVal Header) 'function manual
	If GetFunctionInfo(Header, FuncName, ArgList) <> S_OK then
		'error
		MsgBox("It is possible that the function you are trying to"+_
				" work with has a syntax error.")
		AddFunctionManualText = -1
		Exit Function
	End If
	LfLineStartText = vbLf + LineStartText
	ActiveDocument.Selection.LineUp
	ActiveDocument.Selection.LineDown
	ActiveDocument.Selection.StartOfLine
	ActiveDocument.Selection = LineStartText + "/*" + _
						LfLineStartText + "@fn " + FuncName + _
						LfLineStartText + "@brief" + _
						GetArgListText(LfLineStartText, ArgList) + _
						LfLineStartText + "@return" + _
						LfLineStartText + "@remark" + _
						LfLineStartText + "@*/" + vbLf
End Function

Sub AddManualText()
'DESCRIPTION: 给函数/类/结构体/宏等加上说明。运行该宏前，请先选中函数/类/结构体/宏的原型（Declaration）。
	LineStartText = BlankText(ActiveDocument.Selection)
	Header = TrimBlanks(ActiveDocument.Selection, 1)
	If AddSimpleManualText(Header) <> S_OK then
		Result = AddFunctionManualText(LineStartText, Header)
	End If
End Sub

'
' The End!
'___________________________________________________________________________

Sub CloseExceptActive () 
'DESCRIPTION: 关掉所有非当前打开的窗口;

	'Windows.Item(1) is always the currently active window. So to close all
	' the windows except the active one, keep looping until there is no 
	' longer a Windows.Item(2).
	do while Windows.Count > 1
		Windows.Item(2).Close(dsSaveChangesPrompt)
	Loop
End Sub

Sub CommentOutAllInBlock ()
'DESCRIPTION: 将选块的代码用/*…*/注释起来;
	Dim win
	set win = ActiveWindow
	if win.type <> "Text" Then
	  MsgBox "This macro can only be run when a text editor window is active."
	else
		ActiveDocument.Selection = "/*" + vbLf + ActiveDocument.Selection + "*/"
	End If
End Sub

Sub CommentOutDesc ()
'DESCRIPTION: 将选块的代码用/*…*/注释起来,同时提问注释标题; 
	Dim win
	set win = ActiveWindow
	if win.type <> "Text" Then
	  MsgBox "This macro can only be run when a text editor window is active."
	else
		ControlVarName = InputBox("Please input purpose for comment following code!" + _
			vbLf + vbLf + "Example: No use code!")
		ActiveDocument.Selection = "/*	" + ControlVarName + vbLf + ActiveDocument.Selection + "*/"
	End If
End Sub

Sub CommentOutByEachLine ()
'DESCRIPTION: 将选块的代码用//注释起来;
	Dim win
	set win = ActiveWindow
	if win.type <> "Text" Then
	  MsgBox "This macro can only be run when a text editor window is active."
	else
		CommentType = "// "
 
		StartLine = ActiveDocument.Selection.TopLine
		EndLine = ActiveDocument.Selection.BottomLine
		If EndLine < StartLine Then
			Temp = StartLine
			StartLine = EndLine
			EndLine = Temp
		End If

		If EndLine = StartLine Then
			ActiveDocument.Selection = CommentType + ActiveDocument.Selection

		Else 
			For i = StartLine To EndLine
				ActiveDocument.Selection.GoToLine i
				ActiveDocument.Selection.SelectLine
				ActiveDocument.Selection = CommentType + _
					ActiveDocument.Selection
			Next
		End If
	End If
End Sub

Sub PoundDefOut (ifndef)
	If ifndef = true Then
		PoundType = "#ifndef "
	Else
		PoundType = "#ifdef "
	End If
	
	ControlVarName = InputBox("What should the control variable be?" + _
		vbLf + vbLf + "Example: "+ PoundType + "ControlVariable", PoundType + _
		" out a section of code")
	OK = True
	If ValidId (ControlVarName) = False Then
		Ok = False
		MsgBox("""" + ControlVarName + """" + _ 
			" is not a valid C identifier." + _
			vbLf + "please re-run the macro with a valid C identifier")
	End If
	
	
	Sel = ActiveDocument.Selection
	For i = 1 To Len(Sel) - 1
		If Mid(Sel, i, 1) = vbLf Then
			Sel = Left(Sel,i) + Right(Sel, Len(Sel)-i)
		End If
	Next
	If ControlVarName <> "" And Ok = True Then
		Sel = PoundType + ControlVarName + vbLf + Sel + _
			"#endif //" + ControlVarName
		If Right(Sel,1) <> vbLf Then
			Sel = Sel + vbLf
		End If
		ActiveDocument.Selection = Sel
	End If
End Sub

'The next two macros are exactly the same, except one uses ifndef and the
'  other ifdef. We recycle the same code and just use a different 
'  preprocessor directive.
Sub ifdefOut ()
'DESCRIPTION: 将选块的代码用#ifdef … #endif 包含起来;
	PoundDefOut (False)
End Sub

Sub ifndefOut ()
'DESCRIPTION: 将选块的代码用#ifndef … #endif 包含起来;
	PoundDefOut (True)
End Sub

'Allows the user to make sure the current header file is included only once. 
' There are two ways to do this, using the #pragma once directive or 
' surrounding the entire file in a #ifndef/#endif structure. The first way
' is much cleaner, but it is VC++ specific, and therefore not portable. If 
' you plan on compiling your code with other compilers, use the 
' #ifndef/#endif method, otherwise, the #pragma once option is preferrable.
Sub OneTimeInclude ()
'DESCRIPTION: 将当前的文件(仅限于头文件)增加对一个C/CPP只Include一次的控制;
	
	ext = ActiveDocument.Name
	If ext = "" Then
		If MsgBox("The file you are working with does not have a file extension." + _
				vbLF + "Are you sure this is a C/C++ header file?", 4) = vbCancel Then
			Exit Sub
		End If
		ext = "nofilenamegiven.h"
	End If
	DocName = UCase(ext)
	pos = Instr(ext, ".")
	Do While pos <> 1
		ext = Mid(ext, pos, (Len(ext) - pos + 1))
		pos = Instr(ext, ".")
	Loop
	ext = LCase(ext)
	pos = Instr(DocName, ".")
	If ext = ".h" Or ext = ".hpp" Then
		'Warn user that this will not work with a compiler other than VC++.
		If MsgBox("This macro uses the Visual C++ dependant #pragma once" + _
				vbLf + "Is the source to be portable across compilers?", 4) _
				= 6 Then
			ActiveDocument.Selection.StartOfDocument (False)
			Examp = "__" + Left(DocName, pos - 1) + "_" + _
				UCase(Right(ext, len(ext) - 1)) + "__"
			ControlVarName = InputBox("What should the control variable be?" _
				+ vbLf + vbLf + "Example: #ifdef " + _
				Examp, "One time header include protection", Examp)
			If ValidId (ControlVarName) = True Then
				ActiveDocument.Selection = "#ifndef " + ControlVarName + _
					vbLf + "#define " + ControlVarName + vbLf
				ActiveDocument.Selection.EndOfDocument(False)
				ActiveDocument.Selection = vbLf + "#endif //" + _ 
					ControlVarName
			Else
				MsgBox(ControlVarName + " is not a valid c identifier." + _
				vbLf + "please re-run the macro with a valid C identifier")
			End If
		Else
			ActiveDocument.Selection.StartOfDocument(False)
			ActiveDocument.Selection = "#pragma once" + vbLf + vbLf
		End If
	Else
		MsgBox("This macro can only be run on .h or .hpp files")
	End If
End Sub

Sub ReplaceText(szText, szFindText, szReplaceText)
	lenText = Len(szFindText)
	pos = Instr(szText, szFindText)
	Do While pos > 0
		pos = pos - 1
		szText = Left(szText, pos) + szReplaceText + Right(szText,Len(szText)-pos-lenText)
		pos = Instr(szText, szFindText)
	Loop
End Sub

Sub ExtAddFileDescriptionHeader(fType)
'
'
'Begin Recording
	DefaultUserName = "许式伟"
	ActiveDocument.Selection.StartOfDocument
	PathName = ActiveDocument.FullName
	pos = InstrRev(PathName, "include")
	if pos > 0 then
		PathName = Right(PathName, Len(PathName)-pos-7)
		ReplaceText PathName, "\", "/"
	else
		pos = InstrRev(PathName, "\")
		if pos > 0 then
			PathName = Right(PathName, Len(PathName)-pos)
		else
			PathName = ActiveDocument.Name
		end if
	end if
	if fType = 0 then
		ActiveDocumentSelection  = "/* -------------------------------------------------------------------------" + _
							vbLf + "//	文件名		：	" + PathName + _
							vbLf + "//	创建者		：	" + DefaultUserName + _
							vbLf + "//	创建时间	：	" + CStr(Now) + _
							vbLf + "//	功能描述	：	" + _
							vbLf + "//" + _
							vbLf + "//	$" + "Id" + ": " + "$" + _
							vbLf + "// -----------------------------------------------------------------------*/" + vbLf
	else 
		ActiveDocumentSelection  = "/* -------------------------------------------------------------------------" + _
							vbLf + "// WINX: a C++ template GUI library - MOST SIMPLE BUT EFFECTIVE" + _
							vbLf + "// " + _
							vbLf + "// This file is a part of the WINX Library." + _
							vbLf + "// The use and distribution terms for this software are covered by the" + _
							vbLf + "// Common Public License 1.0 (http://opensource.org/licenses/cpl.php)" + _
							vbLf + "// which can be found in the file CPL.txt at this distribution. By using" + _
							vbLf + "// this software in any fashion, you are agreeing to be bound by the terms" + _
							vbLf + "// of this license. You must not remove this notice, or any other, from" + _
							vbLf + "// this software." + _
							vbLf + "// " + _
							vbLf + "// Module: " + PathName + _
							vbLf + "// Creator: xushiwei" + _
							vbLf + "// Email: xushiweizh@gmail.com" + _
							vbLf + "// Date: " + CStr(Now) + _
							vbLf + "// " + _
							vbLf + "// $" + "Id" + ": " + "$" + _
							vbLf + "// -----------------------------------------------------------------------*/" + vbLf
	end if

	'Function IsHeaderFile (ByVal doc)
	extType = FileExtType(PathName)
	'End Function
	If extType = 1 Then ' C/C++ Source File
		pos = InstrRev(PathName, ".")
		if pos > 0 then
			HeaderName = Left(PathName, pos) + "h"
		end if
		ActiveDocument.Selection = ActiveDocumentSelection + vbLf + _
						"#include ""stdafx.h""" + vbLf + _
						"#include """ + HeaderName + """" + vbLf + _
						vbLf + _
						"#ifdef _DEBUG" + vbLf + _
						"#define new DEBUG_NEW" + vbLf + _
						"#undef THIS_FILE" + vbLf + _
						"static char THIS_FILE[] = __FILE__;" + vbLf + _
						"#endif" + vbLf + _
						vbLf + _
						"// -------------------------------------------------------------------------" + vbLf + _
						vbLf + _
						vbLf + _
						vbLf + _
						"// -------------------------------------------------------------------------" + vbLf + _
						"// $" + "Log" + ": " + "$" + vbLf
	ElseIf extType = 2 Then 'C/C++ Header File
		PathName = UCase(PathName)
		ReplaceText PathName, ".", "_"
		ReplaceText PathName, "/", "_"
		PathName = " __" + PathName + "__"
		'写文件头：
		ActiveDocument.Selection = ActiveDocumentSelection + _
						"#ifndef" + PathName + vbLf + _
						"#define" + PathName + vbLf + _
						vbLf + _
						"// -------------------------------------------------------------------------" + vbLf + _
						vbLf
		'写文件尾：
		ActiveDocument.Selection.EndOfDocument
		ActiveDocument.Selection = vbLf + _
						"// -------------------------------------------------------------------------" + vbLf + _
						"// $" + "Log" + ": " + "$" + vbLf + _
						vbLf + _
						"#endif /*" + PathName + " */" + vbLf
	ElseIf extType = 7 Then
		ActiveDocument.Selection = _
			"EXPORTS" + vbLf + _
			"	DllCanUnloadNow     @1 PRIVATE" + vbLf + _
			"	DllGetClassObject   @2 PRIVATE" + vbLf + _
			"	DllRegisterServer   @3 PRIVATE" + vbLf + _
			"	DllUnregisterServer	@4 PRIVATE" + vbLf + _
			vbLf
	Else 'If extType = 3 Then 'Text File
		FileName = ActiveDocument.Name
		pos = InstrRev(FileName, ".")
		if pos > 0 then
			FileName = Left(FileName, pos-1)
		end if
		ActiveDocument.Selection = _
			"Title:  " + FileName + vbLf + _
			"Author: " + DefaultUserName + vbLf + _
			"Create At: " + CStr(Now) + vbLf + _ 
			vbLf
	End If
'End Recording
End Sub

Sub AddFileDescriptionHeader()
	ExtAddFileDescriptionHeader 0
End Sub

Sub AddNewFileDescriptionHeader()
	ExtAddFileDescriptionHeader 1
End Sub

' -------------------------------------------------------------------------
' 函数		: GUIDGenerator/ManualGenerator
' -------------------------------------------------------------------------
Sub GUIDGenerator()
'DESCRIPTION: GUID/IID/CLSID Generator
'Begin Recording
	ExecuteCommand "UserTool8"
	ActiveDocument.Selection.Paste
'End Recording
End Sub

Sub ManualGenerator()
'DESCRIPTION: Manual Generator
	ExecuteCommand "UserTool9"
End Sub

' -------------------------------------------------------------------------
' 函数		: MarkMultiLineMacro
' -------------------------------------------------------------------------
Sub MarkALineMacro(ByVal nLine)
	ActiveDocument.Selection.GotoLine nLine
	ActiveDocument.Selection.EndOfLine
	nCol = ActiveDocument.Selection.CurrentColumn
	szSelection = ""
	if nCol > 77 Then
		szSelection = vbTab
	else
		nTab = 19 - Int((nCol-1) / 4)
		for i = 1 to nTab
			szSelection = szSelection + vbTab
		next
	end if
	ActiveDocument.Selection = szSelection + "\"
End Sub

Sub MarkMultiLineMacro()
'DESCRIPTION: Mark Multi Line Macro
	nTopLine = ActiveDocument.Selection.TopLine
	nBottomLine = ActiveDocument.Selection.BottomLine
	for i = nTopLine to nBottomLine
		MarkALineMacro i
	next
End Sub

' -------------------------------------------------------------------------
' 函数		: ClearSpace
' -------------------------------------------------------------------------
Sub ClearALine(ByVal nLine)
	ActiveDocument.Selection.GotoLine nLine
	ActiveDocument.Selection.SelectLine
	szSelection = ActiveDocument.Selection
	szSelection = Left(szSelection, Len(szSelection) -1)
	ActiveDocument.Selection.LineDown
End Sub

Sub ClearSpace()
	nCurrentLine = ActiveDocument.Selection.CurrentLine
	nCurrentCol = ActiveDocument.Selection.CurrentColumn
	ActiveDocument.Selection.EndOfDocument
	nTotalLine = ActiveDocument.Selection.CurrentLine
	for i = 1 to nTotalLine
		ClearALine i
	next
	ActiveDocument.Selection.MoveTo nCurrentLine, nCurrentCol
End Sub

' -------------------------------------------------------------------------
' 函数		: DeclareAttrPure
' -------------------------------------------------------------------------
Sub DeclareAttrPure()
'DESCRIPTION: 申明一个属性
	strInput	= InputBox("申明一个属性" + vbLf + "Interface Attr = ")
	Reti		= InStr(strInput, " ")
	if Reti > 0 then 
		strInterface	= Left(strInput, Reti-1)
		strAttr			= Mid(strInput, Reti+1)
		ActiveDocument.Selection = _
			vbTab + "// " + strInterface + "* " + strAttr + ";" + vbLf + _
			vbTab + "STDMETHOD (Get" + strAttr + ")(" + strInterface + "** pp" + strAttr + ") = 0;" + vbLf + _
			vbTab + "STDMETHOD (Set" + strAttr + ")(" + strInterface + "*  p" + strAttr + ")  = 0;" + vbLf + _
			vbTab + "STDMETHOD_(" + strInterface + "*, Get" + strAttr + "Ptr_)() = 0;" + vbLf + vbLf
	end if
End Sub
